{
  "name": "Autodrone",
  "tagline": "",
  "body": "### Progress Update 10/02/2016\r\n[Pic!!](http://i.imgur.com/oE9Bh0k.jpg)\r\nI've assembled most parts of the drone. Except for one little hiccup. The lipo cell only has a jsp connector. But the power module for Navio2 only supports XT60 plugs. I ordered new lipo cells with higher capacity and some new connectors.\r\nSoftware-wise, I've tried different images to be flahsed on the mini sd card. Raspbian Jessie with ROS is extremely slow for some reasons. And ArduPilot is not being friendly on the original Raspbian. I don't want to dive into the details of the code to figure out how to make it work. The Image provided by Emlid is a headless(w/o GUI) Debian. But it seems to be my best option now.\r\nStay tuned for more updates.\r\n\r\n### Progress Update 9/26/2016.\r\nDuring the summer, I tried to use the Arduino to control the motor on the xv11 lidar and transmit the information via Xbee. Unfortunately, due to the limit of arduino (only one set of Rx/Tx pins), and the format of laser scan data, I wasn't able to receive the lidar information. I'm going to steer the project into another direction. After some research, I realized there are tons of information on using the <a href=\"http://wiki.ros.org/xv_11_laser_driver/Tutorials/Running%20the%20XV-11%20Node\">xv11 lidar with ros</a>, and <a href=\"http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Kinetic%20on%20the%20Raspberry%20Pi\">installing ros on Raspberry pi</a>. I decided to use the rpi instead of Arduino. There are several advantages of using rpi: no need for wireless transmission, all the calculations are done on the rpi; the rpi is more flexible for future expansions (different sensors). I also decided to use a flight controller <a href=\"https://emlid.com/shop/navio2/\">Navio2</a> to interact with the motors and escs. Stay tuned for future updates!\r\n\r\n### Progress Update 6/7/2016\r\nAll the parts arrived and I've started the assembly process. I connected the escs to the battery and the motors. I basically connected them as servos onto the Arduino. There should be plenty of tutorials online for this part. The range for the PWM outputs is 700-2000 (I think?). All the motors are working correctly. I've also made sure the 10 DOF gyro is firmly connected to the chassis of the drone. Still have to test out the function of that but should be quite easy. So far all the components include: 1 Arduino UNO, 2 (3?) Xbees, 1 Xbee shield for arduino, 2 Xbee adaptors, 1 9V battery, 1 1000mAh lipo, the drone chassis plus the motors, 1 xv-11 lidar, 1 lidar controller and wires and maybe breadboards. The one concern I have right now is that the motors might not be able to handle all the weight of the components. But it should be easily fixed by using more powerful motors. I also ordered a getsurreal <a href=\"https://www.getsurreal.com/product/xv-lidar-controller-v1-2-kit\">xv lidar controller</a>. This is basically a teensy 2.0 to control the motors of the lidar with a PID controller and receive the data from the laser range finder. It's working on usb serial connection. So the next step is to figure out how to make it work on a Xbee connection.\r\n\r\n### Progress Update 5/12/2016.\r\nWell all the prototyping parts are ordered. I decided to go with the low cost [fpv 250 kit](http://www.hobbyking.com/hobbyking/store/__52863__HobbyKing_Spec_FPV250_V2_Quad_Copter_ARF_Combo_Kit_Mini_Sized_FPV_Multi_Rotor_ARF_.html) from hobbyking. It comes with four motors, the ESCs, the battery, the propellers and the chassis. As of the flight controller, I  decided to ditch the idea of using traditional RC since it won't be controlled manually. I went for the Arduino as always. We all know that this isn't the long term solution but hey, it's really good for prototyping. As of communications, I went for [the XBee kit](https://www.sparkfun.com/products/13197) from SparkFun. I was originally considering using a camera for the visuals of the drone. The transmission of the video would be a hassle and it wouldn't be fast enough to localize the drone. So I decided using a LIDAR and SLAM would be the fastest way to localize the drone. Now the problem is LIDARs are expensive. There are two solutions I found. One of them is to use the LIDAR LITE V2 from Pulsed Light as the laser range finder. It has a 40 m range and high precision. It costs a little over $100 but it's out of stock everywhere. The other solution was the LIDAR ripped out from the Neato cleaning robot. It has a reasonable size and cost just around $80. I also found documentations on how to use it with Arduino and ROS. I'll update the documentations and details later along the project. So the whole thing comes down to about less than $250. If it works, it's probably the cheapest autonomous drone on the market.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}